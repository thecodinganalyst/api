plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.hevlar'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Api'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.data:spring-data-rest-hal-explorer'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport' // generate report after tests
}

jacoco {
	toolVersion = '0.8.12'
}

def coverageExcludes = ['**/ApiApplication.class'] // add more if you want

tasks.jacocoTestReport {
	dependsOn tasks.test
	reports {
		xml.required.set(true)
		html.required.set(true)
	}
	// exclude classes from report
	classDirectories.setFrom(
			files(sourceSets.main.output.classesDirs).asFileTree.matching {
				exclude coverageExcludes
			}
	)
}

tasks.jacocoTestCoverageVerification {
	dependsOn tasks.test
	classDirectories.setFrom(
			files(sourceSets.main.output.classesDirs).asFileTree.matching {
				exclude coverageExcludes
			}
	)
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}
		}
		rule {
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}
		}
	}
}

// make "gradle check" fail if coverage is below thresholds
tasks.named('check') {
	dependsOn 'jacocoTestCoverageVerification'
}